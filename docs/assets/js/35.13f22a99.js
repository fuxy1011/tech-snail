(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{327:function(a,t,e){"use strict";e.r(t);var s=e(38),r=Object(s.a)({},function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"性能优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#性能优化","aria-hidden":"true"}},[a._v("#")]),a._v(" 性能优化")]),a._v(" "),e("p",[a._v("性能优化的题目也是面试常考的，这类题目有很大的扩展性，能够扩展出来很多小细节，而且对个人的技术视野和业务能力有很大的挑战。这部分笔者会重点讲下常用的性能优化方案。")]),a._v(" "),e("blockquote",[e("p",[a._v("题目：总结前端性能优化的解决方案")])]),a._v(" "),e("h2",{attrs:{id:"优化原则和方向"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优化原则和方向","aria-hidden":"true"}},[a._v("#")]),a._v(" 优化原则和方向")]),a._v(" "),e("p",[a._v("性能优化的原则是以更好的用户体验为标准，具体就是实现下面的目标：")]),a._v(" "),e("ul",[e("li",[a._v("多使用内存、缓存或者其他方法")]),a._v(" "),e("li",[a._v("减少 CPU 和GPU 计算，更快展现")])]),a._v(" "),e("p",[a._v("优化的方向有两个：")]),a._v(" "),e("ul",[e("li",[a._v("减少页面体积，提升网络加载")]),a._v(" "),e("li",[a._v("优化页面渲染")])]),a._v(" "),e("h3",{attrs:{id:"减少页面体积，提升网络加载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#减少页面体积，提升网络加载","aria-hidden":"true"}},[a._v("#")]),a._v(" 减少页面体积，提升网络加载")]),a._v(" "),e("ul",[e("li",[a._v("静态资源的压缩合并（JS 代码压缩合并、CSS 代码压缩合并、雪碧图）")]),a._v(" "),e("li",[a._v("静态资源缓存（资源名称加 MD5 戳）")]),a._v(" "),e("li",[a._v("使用 CDN 让资源加载更快")])]),a._v(" "),e("h3",{attrs:{id:"优化页面渲染"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优化页面渲染","aria-hidden":"true"}},[a._v("#")]),a._v(" 优化页面渲染")]),a._v(" "),e("ul",[e("li",[a._v("CSS 放前面，JS 放后面")]),a._v(" "),e("li",[a._v("懒加载（图片懒加载、下拉加载更多）")]),a._v(" "),e("li",[a._v("减少DOM 查询，对 DOM 查询做缓存")]),a._v(" "),e("li",[a._v("减少DOM 操作，多个操作尽量合并在一起执行（DocumentFragment）")]),a._v(" "),e("li",[a._v("事件节流")]),a._v(" "),e("li",[a._v("尽早执行操作（DOMContentLoaded）")]),a._v(" "),e("li",[a._v("使用 SSR 后端渲染，数据直接输出到 HTML 中，减少浏览器使用 JS 模板渲染页面 HTML 的时间")])]),a._v(" "),e("h3",{attrs:{id:"详细解释"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#详细解释","aria-hidden":"true"}},[a._v("#")]),a._v(" 详细解释")]),a._v(" "),e("h4",{attrs:{id:"静态资源的压缩合并"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#静态资源的压缩合并","aria-hidden":"true"}},[a._v("#")]),a._v(" 静态资源的压缩合并")]),a._v(" "),e("p",[a._v("如果不合并，每个都会走一遍之前介绍的请求过程")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('<script src="a.js"><\/script>\n<script src="b.js"><\/script>\n<script src="c.js"><\/script>\n')])])]),e("p",[a._v("如果合并了，就只走一遍请求过程")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('<script src="abc.js"><\/script>\n')])])]),e("h4",{attrs:{id:"静态资源缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#静态资源缓存","aria-hidden":"true"}},[a._v("#")]),a._v(" 静态资源缓存")]),a._v(" "),e("p",[a._v("通过链接名称控制缓存")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('<script src="abc_1.js"><\/script>\n')])])]),e("p",[a._v("只有内容改变的时候，链接名称才会改变")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('<script src="abc_2.js"><\/script>\n')])])]),e("p",[a._v("这个名称不用手动改，可通过前端构建工具根据文件内容，为文件名称添加 MD5 后缀。")]),a._v(" "),e("h4",{attrs:{id:"使用-cdn-让资源加载更快"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-cdn-让资源加载更快","aria-hidden":"true"}},[a._v("#")]),a._v(" 使用 CDN 让资源加载更快")]),a._v(" "),e("p",[a._v("CDN 会提供专业的加载优化方案，静态资源要尽量放在 CDN 上。例如：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('<script src="https://cdn.bootcss.com/zepto/1.0rc1/zepto.min.js"><\/script>\n')])])]),e("h4",{attrs:{id:"使用-ssr-后端渲染"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-ssr-后端渲染","aria-hidden":"true"}},[a._v("#")]),a._v(" 使用 SSR 后端渲染")]),a._v(" "),e("p",[a._v("可一次性输出 HTML 内容，不用在页面渲染完成之后，再通过 Ajax 加载数据、再渲染。例如使用 smarty、Vue SSR 等。")]),a._v(" "),e("h4",{attrs:{id:"css-放前面，js-放后面"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#css-放前面，js-放后面","aria-hidden":"true"}},[a._v("#")]),a._v(" CSS 放前面，JS 放后面")]),a._v(" "),e("p",[a._v("上文讲述浏览器渲染过程时已经提过，不再赘述。")]),a._v(" "),e("h4",{attrs:{id:"懒加载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#懒加载","aria-hidden":"true"}},[a._v("#")]),a._v(" 懒加载")]),a._v(" "),e("p",[a._v("一开始先给为 src 赋值成一个通用的预览图，下拉时候再动态赋值成正式的图片。如下，preview.png是预览图片，比较小，加载很快，而且很多图片都共用这个preview.png，加载一次即可。待页面下拉，图片显示出来时，再去替换src为data-realsrc的值。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('<img src="preview.png" data-realsrc="abc.png"/>\n')])])]),e("p",[a._v("另外，这里为何要用data-开头的属性值？—— 所有 HTML 中自定义的属性，都应该用data-开头，因为data-开头的属性浏览器渲染的时候会忽略掉，提高渲染性能。")]),a._v(" "),e("h4",{attrs:{id:"dom-查询做缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dom-查询做缓存","aria-hidden":"true"}},[a._v("#")]),a._v(" DOM 查询做缓存")]),a._v(" "),e("p",[a._v("两段代码做一下对比：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var pList = document.getElementsByTagName('p')  // 只查询一个 DOM ，缓存在 pList 中了\nvar i\nfor (i = 0; i < pList.length; i++) {\n}\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var i\nfor (i = 0; i < document.getElementsByTagName('p').length; i++) {  // 每次循环，都会查询 DOM ，耗费性能\n}\n")])])]),e("p",[a._v("总结：DOM 操作，无论查询还是修改，都是非常耗费性能的，应尽量减少。")]),a._v(" "),e("h4",{attrs:{id:"合并-dom-插入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#合并-dom-插入","aria-hidden":"true"}},[a._v("#")]),a._v(" 合并 DOM 插入")]),a._v(" "),e("p",[a._v("DOM 操作是非常耗费性能的，因此插入多个标签时，先插入 Fragment 然后再统一插入 DOM。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('var listNode = document.getElementById(\'list\')\n// 要插入 10 个 li 标签\nvar frag = document.createDocumentFragment();\nvar x, li;\nfor(x = 0; x < 10; x++) {\n    li = document.createElement("li");\n    li.innerHTML = "List item " + x;\n    frag.appendChild(li);  // 先放在 frag 中，最后一次性插入到 DOM 结构中。\n}\nlistNode.appendChild(frag);\n')])])]),e("h4",{attrs:{id:"事件节流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件节流","aria-hidden":"true"}},[a._v("#")]),a._v(" 事件节流")]),a._v(" "),e("p",[a._v("例如要在文字改变时触发一个 change 事件，通过 keyup 来监听。使用节流。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var textarea = document.getElementById('text')\nvar timeoutId\ntextarea.addEventListener('keyup', function () {\n    if (timeoutId) {\n        clearTimeout(timeoutId)\n    }\n    timeoutId = setTimeout(function () {\n        // 触发 change 事件\n    }, 100)\n})\n")])])]),e("h4",{attrs:{id:"尽早执行操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#尽早执行操作","aria-hidden":"true"}},[a._v("#")]),a._v(" 尽早执行操作")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("window.addEventListener('load', function () {\n    // 页面的全部资源加载完才会执行，包括图片、视频等\n})\ndocument.addEventListener('DOMContentLoaded', function () {\n    // DOM 渲染完即可执行，此时图片、视频还可能没有加载完\n})\n")])])]),e("h4",{attrs:{id:"性能优化怎么做"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#性能优化怎么做","aria-hidden":"true"}},[a._v("#")]),a._v(" 性能优化怎么做")]),a._v(" "),e("p",[a._v("上面提到的都是性能优化的单个点，性能优化项目具体实施起来，应该按照下面步骤推进：")]),a._v(" "),e("ul",[e("li",[a._v("建立性能数据收集平台，摸底当前性能数据，通过性能打点，将上述整个页面打开过程消耗时间记录下来")]),a._v(" "),e("li",[a._v("分析耗时较长时间段原因，寻找优化点，确定优化目标")]),a._v(" "),e("li",[a._v("开始优化")]),a._v(" "),e("li",[a._v("通过数据收集平台记录优化效果")]),a._v(" "),e("li",[a._v("不断调整优化点和预期目标，循环2~4步骤")])]),a._v(" "),e("p",[a._v("性能优化是个长期的事情，不是一蹴而就的，应该本着先摸底、再分析、后优化的原则逐步来做。")]),a._v(" "),e("h2",{attrs:{id:"参考网址"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考网址","aria-hidden":"true"}},[a._v("#")]),a._v(" 参考网址")]),a._v(" "),e("p",[e("a",{attrs:{href:""}},[a._v("掘进小册")])])])},[],!1,null,null,null);t.default=r.exports}}]);